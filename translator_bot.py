import datetime
import asyncio
import logging
import requests
from telebot.async_telebot import AsyncTeleBot
from telebot import types
from dotenv import load_dotenv

load_dotenv()
bot = AsyncTeleBot('7683563071:AAFxJh5hbr7zSt0YVxjrLBT1MD5CzMoC744')
user_data = {}
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)
current_datetime = datetime.datetime.now()
lang_names = {'ru': '–†—É—Å—Å–∫–∏–π', 'en': 'English'}
logger.info("Bot started at: %s", current_datetime)


async def deepl_translate(text: str, target_lang: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ DeepL API."""
    api_key = "185b0fbe-7484-4d0b-8bf4-8bd28c5d4fcb:fx"
    url = "https://api-free.deepl.com/v2/translate"
    params = {
        "auth_key": api_key,
        "text": text,
        "target_lang": target_lang
    }

    response = requests.post(url, data=params, timeout=10)
    if response.status_code != 200:
        logger.error(f"DeepL API error: {response.status_code}")
        return f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: —Å—Ç–∞—Ç—É—Å {response.status_code}"

    data = response.json()
    if not data or "translations" not in data:
        logger.error("Invalid DeepL response format")
        return "–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞"

    translations = data["translations"]
    if not translations or "text" not in translations[0]:
        logger.error("No translation in response")
        return "–û—à–∏–±–∫–∞: –ø–µ—Ä–µ–≤–æ–¥ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"

    return translations[0]["text"]


def detect_language(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —è–∑—ã–∫ –ø–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–º —Å–∏–º–≤–æ–ª–∞–º."""
    latin = sum(1 for c in text if 'a' <= c.lower() <= 'z')
    cyrillic = sum(1 for c in text if ('–∞' <= c.lower() <= '—è') or c in '—ë–Å')
    return "EN" if latin > cyrillic else "RU"


@bot.message_handler(commands=['start'])
async def start_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_help = types.InlineKeyboardButton('Help', callback_data='help')
    btn_lang = types.InlineKeyboardButton('Language', callback_data='language')
    markup.add(btn_help, btn_lang)

    start_text = (
        '–ü—Ä–∏–≤–µ—Ç!üëêüèª\n–≠—Ç–æ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –º–µ–∂–¥—É —Ä—É—Å—Å–∫–∏–º –∏ –∞–Ω–≥–ª–∏–π—Å–∫–∏–º.\n'
        '–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.\n\n'
        'Hi!üëêüèª\nThis is a translator between Russian and English.\n'
        'Just send text to translate.'
    )
    await bot.send_message(message.chat.id, start_text, reply_markup=markup)


@bot.message_handler(commands=['help'])
async def help_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    markup = types.InlineKeyboardMarkup()
    btn_back = types.InlineKeyboardButton('Back', callback_data='back')
    markup.add(btn_back)

    help_text = (
        "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
        "1. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º\n"
        "2. –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç —è–∑—ã–∫\n"
        "3. –ü–æ–ª—É—á–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥\n\n"
        "How to use the bot:\n\n"
        "1. Send text in Russian or English\n"
        "2. The bot will detect the language automatically\n"
        "3. Receive the translation"
    )
    await bot.send_message(message.chat.id, help_text, reply_markup=markup)


@bot.message_handler(commands=['language'])
async def language_command(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /language."""
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_ru = types.InlineKeyboardButton('–†—É—Å—Å–∫–∏–π', callback_data='lang_ru')
    btn_en = types.InlineKeyboardButton('English', callback_data='lang_en')
    btn_back = types.InlineKeyboardButton('Back', callback_data='back')
    markup.add(btn_ru, btn_en, btn_back)

    lang_text = "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language"
    await bot.send_message(message.chat.id, lang_text, reply_markup=markup)


@bot.message_handler(content_types=['text'])
async def handle_text(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if not message.text or not message.text.strip():
        await bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")
        return

    text = message.text.strip()
    source_lang = detect_language(text)
    target_lang = "RU" if source_lang == "EN" else "EN"

    translated = await deepl_translate(text, target_lang)
    response = (
        f"üîπ –ò—Å—Ö–æ–¥–Ω—ã–π ({lang_names[source_lang.lower()]}): {text}\n\n"
        f"üî∏ –ü–µ—Ä–µ–≤–æ–¥ ({lang_names[target_lang.lower()]}): {translated}"
    )
    await bot.send_message(message.chat.id, response)


@bot.callback_query_handler(func=lambda call: True)
async def callback_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫."""
    if call.data == 'help':
        await help_command(call.message)
    elif call.data == 'language':
        await language_command(call.message)
    elif call.data == 'back':
        await start_command(call.message)
    elif call.data.startswith('lang_'):
        lang = call.data.split('_')[1]
        user_data[call.from_user.id] = {'lang': lang}
        await bot.answer_callback_query(call.id, f"–Ø–∑—ã–∫: {lang_names[lang]}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("Starting bot...")
    await bot.polling(none_stop=True)


if __name__ == '__main__':
    asyncio.run(main())
