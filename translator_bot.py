import asyncio
import datetime
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from config import TELEGRAM_TOKEN
from api import deepl_translate, detect_language


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=TELEGRAM_TOKEN)
dp = Dispatcher()
user_data = {}


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)
current_datetime = datetime.datetime.now()
lang_names = {'ru': '–†—É—Å—Å–∫–∏–π', 'en': 'English'}
logger.info("Bot configuration started at: %s", current_datetime)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def start_command(message: types.Message):
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='Help', callback_data='help'),
                InlineKeyboardButton(text='Language', callback_data='language')
            ]
        ]
    )
    start_text = (
        '–ü—Ä–∏–≤–µ—Ç!üëêüèª\n'
        '–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ\n'
        '—Å –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º –≤ —Å—Ñ–µ—Ä–µ –º–µ–¥–∏—Ü–∏–Ω—ãü©∫üß™\n'
        '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—Éüìù\n\n'
        'Hi!üëêüèª\n'
        'This is a telegram bot that will help you\n'
        'with community translation in the medical fieldü©∫üß™\n'
        'Choose the necessary functionüìù'
    )
    await message.answer(start_text, reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def help_command(message: types.Message):
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='‚¨Ö Back', callback_data='back')]
        ]
    )
    help_text = (
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç?üí°\n\n"
        "üìå–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫;\n"
        "üìå–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ/—Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, "
        "–∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞;\n"
        "üìå–î–∞–ª–µ–µ –±–æ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å API-—Å–µ—Ä–≤–∏—Å–æ–º "
        "Deep Translate –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç, "
        "—Ç.–µ. –ø–µ—Ä–µ–≤–æ–¥ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ —Ç–µ–∫—Å—Ç–∞;\n"
        "üìå–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç—ã –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.\n\n"
        "How does the telegram bot work?üí°\n\n"
        "üìåSelect a language after launching the bot;\n"
        "üìåEnter the word/phrase/sentence that needs translation;\n"
        "üìåNext, the bot interacts with the Deep Translate API "
        "service and outputs the result, i.e. "
        "the translation of the previously entered text;\n"
        "üìåAfter completing the translation "
        "you can enter a new request."
    )
    await message.answer(help_text, reply_markup=markup)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /language
@dp.message(Command("language"))
async def language_command(message: types.Message):
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='üá∑üá∫ –†—É—Å—Å–∫–∏–π',
                                     callback_data='lang_ru'),
                InlineKeyboardButton(text='üá¨üáß English',
                                     callback_data='lang_en')
            ],
            [InlineKeyboardButton(text='‚¨Ö Back', callback_data='back')]
        ]
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=markup
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
@dp.message()
async def handle_text(message: types.Message):
    if not message.text or not message.text.strip():
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")

    text = message.text.strip()
    source_lang = detect_language(text)
    target_lang = "RU" if source_lang == "EN" else "EN"

    translated = await deepl_translate(text, target_lang)
    response = (
        f"üîπ Original ("
        f"{lang_names.get(source_lang.lower(), source_lang)}):\n"
        f"{text}\n\n"
        f"üî∏ Translation ("
        f"{lang_names.get(target_lang.lower(), target_lang)}):\n"
        f"{translated}"
    )
    await message.answer(response)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query()
async def callback_handler(call: types.CallbackQuery):
    if call.data == 'help':
        await help_command(call.message)
    elif call.data == 'language':
        await language_command(call.message)
    elif call.data == 'back':
        await start_command(call.message)
    elif call.data.startswith('lang_'):
        lang = call.data.split('_')[1]
        user_data[call.from_user.id] = {'lang': lang}
        await call.answer(f"–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang_names.get(lang, lang)}")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("Starting bot...")
    await dp.start_polling(bot)
    await bot.session.close()


if __name__ == '__main__':
    asyncio.run(main())
