import asyncio
import datetime
import logging

import aiohttp
import config
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    if not hasattr(config, 'TELEGRAM_TOKEN'):
        raise ValueError(
            "TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.py\n"
            "–î–æ–±–∞–≤—å—Ç–µ: TELEGRAM_TOKEN = '–≤–∞—à_—Ç–æ–∫–µ–Ω'"
        )
    if not config.TELEGRAM_TOKEN:
        raise ValueError("TELEGRAM_TOKEN –ø—É—Å—Ç–æ–π –≤ config.py")

    if not hasattr(config, 'DEEPL_API_KEY'):
        raise ValueError(
            "DEEPL_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ config.py\n"
            "–î–æ–±–∞–≤—å—Ç–µ: DEEPL_API_KEY = '–≤–∞—à_–∫–ª—é—á'\n"
            "–ü–æ–ª—É—á–∏—Ç—å –∫–ª—é—á: https://www.deepl.com/pro-api"
        )
    if not config.DEEPL_API_KEY:
        raise ValueError("DEEPL_API_KEY –ø—É—Å—Ç–æ–π –≤ config.py")

    bot = Bot(token=config.TELEGRAM_TOKEN)
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    exit(1)


dp = Dispatcher()
user_data = {}


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)
current_datetime = datetime.datetime.now()
lang_names = {'ru': '–†—É—Å—Å–∫–∏–π', 'en': 'English'}
logger.info("Bot configuration started at: %s", current_datetime)


async def deepl_translate(text: str, target_lang: str) -> str:
    """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ DeepL API."""
    url = "https://api-free.deepl.com/v2/translate"
    params = {
        "auth_key": config.DEEPL_API_KEY,
        "text": text,
        "target_lang": target_lang
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, data=params) as response:
                if response.status != 200:
                    error = await response.text()
                    logger.error(
                        "DeepL error: %s - %s", response.status, error
                    )
                    return f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ (—Å—Ç–∞—Ç—É—Å {response.status})"

                data = await response.json()
                return data['translations'][0]['text']
    except Exception as e:
        logger.error("Translation error: %s", e)
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ"


def detect_language(text: str) -> str:
    """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ —Ç–µ–∫—Å—Ç–∞."""
    try:
        latin = sum(1 for c in text if 'a' <= c.lower() <= 'z')
        cyrillic = sum(1 for c in text if '–∞' <= c.lower() <= '—è')
        return "EN" if latin > cyrillic else "RU"
    except Exception as e:
        logger.error("Language detection error: %s", e)
        return "EN"


@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='Help', callback_data='help'),
                InlineKeyboardButton(text='Language', callback_data='language')
            ]
        ]
    )
    start_text = (
                '–ü—Ä–∏–≤–µ—Ç!üëêüèª\n'
                '–≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ\n'
                '—Å –∫–æ–º–º—É–Ω–∞–ª—å–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥–æ–º –≤ —Å—Ñ–µ—Ä–µ –º–µ–¥–∏—Ü–∏–Ω—ãü©∫üß™'
                '–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—Éüìù\n'

                'Hi!üëêüèª\n'

                'This is a telegram bot that will help you'
                'with community translation in the medical fieldü©∫üß™\n'
                'Choose the necessary functionüìù\n'
    )
    await message.answer(start_text, reply_markup=markup)


@dp.message(Command("help"))
async def help_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='Back', callback_data='back')
            ]
        ]
    )
    help_text = (
                "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç?\nüí°"

                "üìå–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫;\n"
                "üìå–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ/—Å–ª–æ–≤–æ—Å–æ—á–µ—Ç–∞–Ω–∏–µ/–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ,"
                "–∫–æ—Ç–æ—Ä–æ–µ —Ç—Ä–µ–±—É–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞;\n"
                "üìå–î–∞–ª–µ–µ –±–æ—Ç –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å API-—Å–µ—Ä–≤–∏—Å–æ–º"
                "Deep Translate –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç,"
                "—Ç.–µ. –ø–µ—Ä–µ–≤–æ–¥ –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ —Ä–∞–Ω–µ–µ —Ç–µ–∫—Å—Ç–∞;\n"
                "üìå–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç—ã –º–æ–∂–µ—à—å –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.\n"

                "How does the telegram bot work?üí°\n"

                "üìåSelect a language, after launching the bot;\n"
                "üìåEnter the word/phrase/sentence that needs translation;\n"
                "üìåNext, the bot interacts with the Deep Translate API"
                "service and outputs the result, i.e."
                "the translation of the previously entered text;\n"
                "üìåAfter completing the translation "
                "you can enter a new request.\n"
    )
    await message.answer(help_text, reply_markup=markup)


@dp.message(Command("language"))
async def language_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /language."""
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text='üá∑üá∫ –†—É—Å—Å–∫–∏–π',
                                     callback_data='lang_ru'),
                InlineKeyboardButton(text='üá¨üáß English',
                                     callback_data='lang_en')
            ],
            [
                InlineKeyboardButton(text='Back', callback_data='back')
            ]
        ]
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:", reply_markup=markup
    )


@dp.message()
async def handle_text(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    if not message.text or not message.text.strip():
        return await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç")

    text = message.text.strip()
    source_lang = detect_language(text)
    target_lang = "RU" if source_lang == "EN" else "EN"

    translated = await deepl_translate(text, target_lang)
    response = (
        f"üîπ Original ("
        f"{lang_names.get(source_lang.lower(), source_lang)}):\n"
        f"{text}\n\n"
        f"üî∏ Translation ("
        f"{lang_names.get(target_lang.lower(), target_lang)}):\n"
        f"{translated}"
    )
    await message.answer(response)


@dp.callback_query()
async def callback_handler(call: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤."""
    if call.data == 'help':
        await help_command(call.message)
    elif call.data == 'language':
        await language_command(call.message)
    elif call.data == 'back':
        await start_command(call.message)
    elif call.data.startswith('lang_'):
        lang = call.data.split('_')[1]
        user_data[call.from_user.id] = {'lang': lang}
        await call.answer(f"–Ø–∑—ã–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang_names.get(lang, lang)}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    try:
        logger.info("Starting bot...")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error("Bot error: %s", e)
    finally:
        await bot.session.close()


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("Bot stopped by user")
    except Exception as e:
        logger.error("Fatal error: %s", e)
